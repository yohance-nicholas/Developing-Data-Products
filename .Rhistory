select(iso3c,
lat,
long)
wb_data <- wb_data %>%  left_join(wb_countries,
by = "iso3c")
tidycovid19 <- tidycovid19 %>%  left_join(wb_data,
by = "iso3c")%>%
mutate(active = confirmed - deaths - recovered,
confirmed_logratio = difference(log(confirmed)),
confirmed_per_100k = confirmed/population*100000,
deaths_per_100k = deaths/population*100000,
mortality_rate = deaths/confirmed*100,
recovery_rate = recovered/confirmed*100)
# Create Dummy Variables
tidycovid19 <- tidycovid19 %>%
select(region, income) %>%
to_dummy(region, income) %>%
bind_cols(tidycovid19) %>%
select(-contains("region"), contains("region")) %>%
select(-contains("income"), contains("income"))
# Create Aggregate Variables
commodity <- c("GUY", "JAM", "TTO") # To create variable which identifies type of economy
oecs <- c("ATG", "DMA", "GRD", "KNA", "LCA", "VCT") # To create variable which identifies OECS Member States
caricom <- c("ATG","BHS","BLZ","BRB","DMA","GRD","GUY","HTI","JAM","KNA","LCA","SUR","TTO","VCT") # To create variable which identifies CARICOM Member States
# Create Filtered Dataset
caricom_tidycovid19 <- tidycovid19 %>%
filter(iso3c %in% caricom) %>%
mutate(economy = if_else(iso3c %in% commodity, "Commodity Based", "Service Based" ),
oecs = if_else(iso3c %in% oecs, "OECS Member State", "Non-OECS Member State" ),
lat = ifelse(iso3c == "DMA", 15.41500, lat),
long = ifelse(iso3c == "DMA", -61.3710, long),
lat = ifelse(iso3c == "KNA", 17.35782, lat),
long = ifelse(iso3c == "KNA", -62.7830, long),
lat = as.numeric(lat),
long = as.numeric(long)) %>%
mutate_at(35:37, round, 2) %>%
rename(lng = long)%>%
filter(date >= as.Date("2020-03-07")) %>%
drop_na(confirmed)
View(caricom_tidycovid19)
source('~/GitHub/Developing-Data-Products/0. Data Cleaning Scripts/0_tidycovid19_caricom_local.R')
# CARICOM Covid Data Cleaning Script For Loca Data Refresh
# Prepared by Yohance Nicholas
# Version: May 15th 2020
setwd("~/GitHub/Developing-Data-Products")
library(tidyverse)
library(tsibble)
library(tidyr)
library(sjmisc)
tidycovid19 <- readRDS(gzcon(url("https://git.io/JfYa7")))
# Add Spatial Coordinates
library(wbstats)
series <- c("ST.INT.ARVL","SP.POP.0014.TO.ZS", "SP.POP.1564.TO.ZS", "SP.POP.65UP.TO.ZS", "SH.STA.DIAB.ZS", "SH.DTH.NCOM.ZS", "SH.DYN.NCOM.ZS")
wb_data <- wb(indicator = series,
mrv = 1) %>%
select(iso3c, value, indicatorID) %>%
spread(indicatorID, value) %>%
rename(tourist_arrivals = ST.INT.ARVL,
pop_0_14_2018 = SP.POP.0014.TO.ZS,
pop_15_64_2018 = SP.POP.1564.TO.ZS,
pop_65_over_2018 = SP.POP.65UP.TO.ZS,
diabetes_20_79 = SH.STA.DIAB.ZS,
death_by_ncd = SH.DTH.NCOM.ZS,
death_by_cvd_ca_dm_30_70 = SH.DYN.NCOM.ZS)
wb_countries <- wbcountries() %>%
select(iso3c,
lat,
long)
wb_data <- wb_data %>%  left_join(wb_countries,
by = "iso3c")
tidycovid19 <- tidycovid19 %>%  left_join(wb_data,
by = "iso3c")%>%
mutate(active = confirmed - deaths - recovered,
confirmed_logratio = difference(log(confirmed)),
confirmed_per_100k = confirmed/population*100000,
deaths_per_100k = deaths/population*100000,
mortality_rate = deaths/confirmed*100,
recovery_rate = recovered/confirmed*100)
# Create Dummy Variables
tidycovid19 <- tidycovid19 %>%
select(region, income) %>%
to_dummy(region, income) %>%
bind_cols(tidycovid19) %>%
select(-contains("region"), contains("region")) %>%
select(-contains("income"), contains("income"))
# Create Aggregate Variables
commodity <- c("GUY", "JAM", "TTO") # To create variable which identifies type of economy
oecs <- c("ATG", "DMA", "GRD", "KNA", "LCA", "VCT") # To create variable which identifies OECS Member States
caricom <- c("ATG","BHS","BLZ","BRB","DMA","GRD","GUY","HTI","JAM","KNA","LCA","SUR","TTO","VCT") # To create variable which identifies CARICOM Member States
# Create Filtered Dataset
caricom_tidycovid19 <- tidycovid19 %>%
filter(iso3c %in% caricom) %>%
mutate(economy = if_else(iso3c %in% commodity, "Commodity Based", "Service Based" ),
oecs = if_else(iso3c %in% oecs, "OECS Member State", "Non-OECS Member State" ),
lat = ifelse(iso3c == "DMA", 15.41500, lat),
long = ifelse(iso3c == "DMA", -61.3710, long),
lat = ifelse(iso3c == "KNA", 17.35782, lat),
long = ifelse(iso3c == "KNA", -62.7830, long),
lat = as.numeric(lat),
long = as.numeric(long)) %>%
mutate_at(35:37, round, 2) %>%
rename(lng = long)%>%
filter(date >= as.Date("2020-03-07")) %>%
drop_na(confirmed)
caricom_today <- caricom_tidycovid19 %>%
filter(date == max(date))
world_today <- tidycovid19 %>%
filter(date == max(date))
View(world_today)
View(tidycovid19)
# CARICOM Covid Data Cleaning Script For Loca Data Refresh
# Prepared by Yohance Nicholas
# Version: May 15th 2020
setwd("~/GitHub/Developing-Data-Products")
library(tidyverse)
library(tsibble)
library(tidyr)
library(sjmisc)
tidycovid19 <- readRDS(gzcon(url("https://git.io/JfYa7")))%>%
drop_na(confirmed)
View(tidycovid19)
source('~/GitHub/Developing-Data-Products/0. Data Cleaning Scripts/0_tidycovid19_caricom_local.R')
# CARICOM Covid Data Cleaning Script For Loca Data Refresh
# Prepared by Yohance Nicholas
# Version: May 15th 2020
setwd("~/GitHub/Developing-Data-Products")
library(tidyverse)
library(tsibble)
library(tidyr)
library(sjmisc)
tidycovid19 <- readRDS(gzcon(url("https://git.io/JfYa7")))%>%
drop_na(confirmed)
# Add Spatial Coordinates
library(wbstats)
series <- c("ST.INT.ARVL","SP.POP.0014.TO.ZS", "SP.POP.1564.TO.ZS", "SP.POP.65UP.TO.ZS", "SH.STA.DIAB.ZS", "SH.DTH.NCOM.ZS", "SH.DYN.NCOM.ZS")
wb_data <- wb(indicator = series,
mrv = 1) %>%
select(iso3c, value, indicatorID) %>%
spread(indicatorID, value) %>%
rename(tourist_arrivals = ST.INT.ARVL,
pop_0_14_2018 = SP.POP.0014.TO.ZS,
pop_15_64_2018 = SP.POP.1564.TO.ZS,
pop_65_over_2018 = SP.POP.65UP.TO.ZS,
diabetes_20_79 = SH.STA.DIAB.ZS,
death_by_ncd = SH.DTH.NCOM.ZS,
death_by_cvd_ca_dm_30_70 = SH.DYN.NCOM.ZS)
wb_countries <- wbcountries() %>%
select(iso3c,
lat,
long)
wb_data <- wb_data %>%  left_join(wb_countries,
by = "iso3c")
tidycovid19 <- tidycovid19 %>%  left_join(wb_data,
by = "iso3c")%>%
mutate(active = confirmed - deaths - recovered,
confirmed_logratio = difference(log(confirmed)),
confirmed_per_100k = confirmed/population*100000,
deaths_per_100k = deaths/population*100000,
mortality_rate = deaths/confirmed*100,
recovery_rate = recovered/confirmed*100)
# Create Dummy Variables
tidycovid19 <- tidycovid19 %>%
select(region, income) %>%
to_dummy(region, income) %>%
bind_cols(tidycovid19) %>%
select(-contains("region"), contains("region")) %>%
select(-contains("income"), contains("income"))
# Create Aggregate Variables
commodity <- c("GUY", "JAM", "TTO") # To create variable which identifies type of economy
oecs <- c("ATG", "DMA", "GRD", "KNA", "LCA", "VCT") # To create variable which identifies OECS Member States
caricom <- c("ATG","BHS","BLZ","BRB","DMA","GRD","GUY","HTI","JAM","KNA","LCA","SUR","TTO","VCT") # To create variable which identifies CARICOM Member States
# Create Filtered Dataset
caricom_tidycovid19 <- tidycovid19 %>%
filter(iso3c %in% caricom) %>%
mutate(economy = if_else(iso3c %in% commodity, "Commodity Based", "Service Based" ),
oecs = if_else(iso3c %in% oecs, "OECS Member State", "Non-OECS Member State" ),
lat = ifelse(iso3c == "DMA", 15.41500, lat),
long = ifelse(iso3c == "DMA", -61.3710, long),
lat = ifelse(iso3c == "KNA", 17.35782, lat),
long = ifelse(iso3c == "KNA", -62.7830, long),
lat = as.numeric(lat),
long = as.numeric(long)) %>%
mutate_at(35:37, round, 2) %>%
rename(lng = long)%>%
filter(date >= as.Date("2020-03-07"))
test <- group_by(country)
test <- caricom_tidycovid19 %>% group_by(country)
View(test)
summarise_all(test)
summarise_all(test, mean)
summarise_all(test, max)
summarise_all(test, max(date))
summarise_all(test, min)
source('~/GitHub/Developing-Data-Products/0. Data Cleaning Scripts/0_tidycovid19_caricom_local.R')
early_tests <- tidycovid19 %>%
group_by(iso3c) %>%
filter(population > 10e6) %>%
filter(confirmed > 0) %>%
filter(!all(is.na(total_tests))) %>%
mutate(total_tests = na.approx(c(0, total_tests), rule = 2)[-1]) %>%
filter(date - min(date) < 30) %>%
summarise(early_tests = unique(1e5*max(total_tests, na.rm = TRUE)/population)) %>%
filter(!is.na(early_tests))
# CARICOM Covid Data Cleaning Script For Loca Data Refresh
# Prepared by Yohance Nicholas
# Version: May 15th 2020
setwd("~/GitHub/Developing-Data-Products")
library(tidyverse)
library(tsibble)
library(tidyr)
library(sjmisc)
tidycovid19 <- readRDS(gzcon(url("https://git.io/JfYa7")))%>%
drop_na(confirmed)
# Add Spatial Coordinates
library(wbstats)
series <- c("ST.INT.ARVL","SP.POP.0014.TO.ZS", "SP.POP.1564.TO.ZS", "SP.POP.65UP.TO.ZS", "SH.STA.DIAB.ZS", "SH.DTH.NCOM.ZS", "SH.DYN.NCOM.ZS")
wb_data <- wb(indicator = series,
mrv = 1) %>%
select(iso3c, value, indicatorID) %>%
spread(indicatorID, value) %>%
rename(tourist_arrivals = ST.INT.ARVL,
pop_0_14_2018 = SP.POP.0014.TO.ZS,
pop_15_64_2018 = SP.POP.1564.TO.ZS,
pop_65_over_2018 = SP.POP.65UP.TO.ZS,
diabetes_20_79 = SH.STA.DIAB.ZS,
death_by_ncd = SH.DTH.NCOM.ZS,
death_by_cvd_ca_dm_30_70 = SH.DYN.NCOM.ZS)
wb_countries <- wbcountries() %>%
select(iso3c,
lat,
long)
wb_data <- wb_data %>%  left_join(wb_countries,
by = "iso3c")
tidycovid19 <- tidycovid19 %>%  left_join(wb_data,
by = "iso3c")%>%
mutate(active = confirmed - deaths - recovered,
confirmed_logratio = difference(log(confirmed)),
confirmed_per_100k = confirmed/population*100000,
deaths_per_100k = deaths/population*100000,
mortality_rate = deaths/confirmed*100,
recovery_rate = recovered/confirmed*100)
# Create Dummy Variables
tidycovid19 <- tidycovid19 %>%
select(region, income) %>%
to_dummy(region, income) %>%
bind_cols(tidycovid19) %>%
select(-contains("region"), contains("region")) %>%
select(-contains("income"), contains("income"))
early_tests <- tidycovid19 %>%
group_by(iso3c) %>%
filter(population > 10e6) %>%
filter(confirmed > 0) %>%
filter(!all(is.na(total_tests))) %>%
mutate(total_tests = na.approx(c(0, total_tests), rule = 2)[-1]) %>%
filter(date - min(date) < 30) %>%
summarise(early_tests = unique(1e5*max(total_tests, na.rm = TRUE)/population)) %>%
filter(!is.na(early_tests))
deaths <- tidycovid19 %>%
group_by(iso3c) %>%
summarise(deaths = unique(1e5*max(deaths, na.rm = TRUE)/population))
deaths %>% left_join(early_tests, by = "iso3c") %>%
filter(!is.na(early_tests)) %>%
ggplot(aes(x = early_tests, y = deaths)) +
geom_point() +
theme_minimal() +
geom_label_repel(aes(label = iso3c)) +
scale_x_log10() +
scale_y_log10() +
labs(
x = "Tests within the first 30 days by 100,000 inhabitants (interpolated)",
y = "Deaths per 100,000 inhabitants",
caption = "Case data: JHU CSSE, Test data: Our World in Data."
)
early_tests <- tidycovid19 %>%
group_by(iso3c) %>%
filter(population > 10e6) %>%
filter(confirmed > 0) %>%
filter(!all(is.na(total_tests))) %>%
mutate(total_tests = na.approx(c(0, total_tests), rule = 2)[-1]) %>%
filter(date - min(date) < 30) %>%
summarise(early_tests = unique(1e5*max(total_tests, na.rm = TRUE)/population)) %>%
filter(!is.na(early_tests))
library(zoo)
early_tests <- tidycovid19 %>%
group_by(iso3c) %>%
filter(population > 10e6) %>%
filter(confirmed > 0) %>%
filter(!all(is.na(total_tests))) %>%
mutate(total_tests = na.approx(c(0, total_tests), rule = 2)[-1]) %>%
filter(date - min(date) < 30) %>%
summarise(early_tests = unique(1e5*max(total_tests, na.rm = TRUE)/population)) %>%
filter(!is.na(early_tests))
deaths <- tidycovid19 %>%
group_by(iso3c) %>%
summarise(deaths = unique(1e5*max(deaths, na.rm = TRUE)/population))
deaths %>% left_join(early_tests, by = "iso3c") %>%
filter(!is.na(early_tests)) %>%
ggplot(aes(x = early_tests, y = deaths)) +
geom_point() +
theme_minimal() +
geom_label_repel(aes(label = iso3c)) +
scale_x_log10() +
scale_y_log10() +
labs(
x = "Tests within the first 30 days by 100,000 inhabitants (interpolated)",
y = "Deaths per 100,000 inhabitants",
caption = "Case data: JHU CSSE, Test data: Our World in Data."
)
library(ggrepl)
install.packages("ggrepl")
deaths %>% left_join(early_tests, by = "iso3c") %>%
filter(!is.na(early_tests)) %>%
ggplot(aes(x = early_tests, y = deaths)) +
geom_point() +
theme_minimal() +
scale_x_log10() +
scale_y_log10() +
labs(
x = "Tests within the first 30 days by 100,000 inhabitants (interpolated)",
y = "Deaths per 100,000 inhabitants",
caption = "Case data: JHU CSSE, Test data: Our World in Data."
)
deaths %>% left_join(early_tests, by = "iso3c") %>%
filter(!is.na(early_tests)) %>%
ggplot(aes(x = early_tests, y = deaths)) +
geom_point() +
scale_x_log10() +
scale_y_log10() +
labs(
x = "Tests within the first 30 days by 100,000 inhabitants (interpolated)",
y = "Deaths per 100,000 inhabitants",
caption = "Case data: JHU CSSE, Test data: Our World in Data."
)
deaths %>% left_join(early_tests, by = "iso3c") %>%
filter(!is.na(early_tests)) %>%
ggplot(aes(x = early_tests, y = deaths)) +
geom_point() +
labs(
x = "Tests within the first 30 days by 100,000 inhabitants (interpolated)",
y = "Deaths per 100,000 inhabitants",
caption = "Case data: JHU CSSE, Test data: Our World in Data."
)
install.packages(c("backports", "gmp", "gss", "RcppArmadillo"))
library(zoo)
library(ggrepl)
early_tests <- tidycovid19 %>%
group_by(iso3c) %>%
filter(population > 10e6) %>%
filter(confirmed > 0) %>%
filter(!all(is.na(total_tests))) %>%
mutate(total_tests = na.approx(c(0, total_tests), rule = 2)[-1]) %>%
filter(date - min(date) < 30) %>%
summarise(early_tests = unique(1e5*max(total_tests, na.rm = TRUE)/population)) %>%
filter(!is.na(early_tests))
deaths <- tidycovid19 %>%
group_by(iso3c) %>%
summarise(deaths = unique(1e5*max(deaths, na.rm = TRUE)/population))
deaths %>% left_join(early_tests, by = "iso3c") %>%
filter(!is.na(early_tests)) %>%
ggplot(aes(x = early_tests, y = deaths)) +
geom_point() +
scale_x_log10() +
scale_y_log10() +
labs(
x = "Tests within the first 30 days by 100,000 inhabitants (interpolated)",
y = "Deaths per 100,000 inhabitants",
caption = "Case data: JHU CSSE, Test data: Our World in Data."
)
library(zoo)
library(ggrepl)
early_tests <- caricom_today %>%
group_by(iso3c) %>%
filter(population > 10e6) %>%
filter(confirmed > 0) %>%
filter(!all(is.na(total_tests))) %>%
mutate(total_tests = na.approx(c(0, total_tests), rule = 2)[-1]) %>%
filter(date - min(date) < 30) %>%
summarise(early_tests = unique(1e5*max(total_tests, na.rm = TRUE)/population)) %>%
filter(!is.na(early_tests))
deaths <- caricom_today %>%
group_by(iso3c) %>%
summarise(deaths = unique(1e5*max(deaths, na.rm = TRUE)/population))
deaths %>% left_join(early_tests, by = "iso3c") %>%
filter(!is.na(early_tests)) %>%
ggplot(aes(x = early_tests, y = deaths)) +
geom_point() +
scale_x_log10() +
scale_y_log10() +
labs(
x = "Tests within the first 30 days by 100,000 inhabitants (interpolated)",
y = "Deaths per 100,000 inhabitants",
caption = "Case data: JHU CSSE, Test data: Our World in Data."
)
library(zoo)
library(ggrepl)
early_tests <- caricom_tidycovid19 %>%
group_by(iso3c) %>%
filter(population > 10e6) %>%
filter(confirmed > 0) %>%
filter(!all(is.na(total_tests))) %>%
mutate(total_tests = na.approx(c(0, total_tests), rule = 2)[-1]) %>%
filter(date - min(date) < 30) %>%
summarise(early_tests = unique(1e5*max(total_tests, na.rm = TRUE)/population)) %>%
filter(!is.na(early_tests))
deaths <- caricom_tidycovid19 %>%
group_by(iso3c) %>%
summarise(deaths = unique(1e5*max(deaths, na.rm = TRUE)/population))
deaths %>% left_join(early_tests, by = "iso3c") %>%
filter(!is.na(early_tests)) %>%
ggplot(aes(x = early_tests, y = deaths)) +
geom_point() +
scale_x_log10() +
scale_y_log10() +
labs(
x = "Tests within the first 30 days by 100,000 inhabitants (interpolated)",
y = "Deaths per 100,000 inhabitants",
caption = "Case data: JHU CSSE, Test data: Our World in Data."
)
ggplot(caricom_tidycovid19, aes(x = date, y = retail_recreation, color = economy)) +
geom_line() +
theme_minimal() +
labs(
x = NULL,
y = "Percentage change of visits in retail shopping\nand recreational areas",
caption = "Movement data: Google CMR."
) +
gghighlight(TRUE, label_key = east)
install.packages("gghighlight")
ggplot(caricom_tidycovid19, aes(x = date, y = retail_recreation, color = economy)) +
geom_line() +
theme_minimal() +
labs(
x = NULL,
y = "Percentage change of visits in retail shopping\nand recreational areas",
caption = "Movement data: Google CMR."
) +
gghighlight(TRUE, label_key = east)
libraray(gghighlight)
library(gghighlight)
ggplot(caricom_tidycovid19, aes(x = date, y = retail_recreation, color = economy)) +
geom_line() +
theme_minimal() +
labs(
x = NULL,
y = "Percentage change of visits in retail shopping\nand recreational areas",
caption = "Movement data: Google CMR."
) +
gghighlight(TRUE, label_key = east)
View(caricom_tidycovid19)
ggplot(caricom_tidycovid19, aes(x = date, y = gcmr_retail_recreation, color = economy)) +
geom_line() +
theme_minimal() +
labs(
x = NULL,
y = "Percentage change of visits in retail shopping\nand recreational areas",
caption = "Movement data: Google CMR."
) +
gghighlight(TRUE, label_key = east)
ggplot(caricom_tidycovid19, aes(x = date, y = gcmr_retail_recreation)) +
geom_line() +
theme_minimal() +
labs(
x = NULL,
y = "Percentage change of visits in retail shopping\nand recreational areas",
caption = "Movement data: Google CMR."
) +
gghighlight(TRUE, label_key = east)
ggplot(caricom_tidycovid19, aes(x = date, y = gcmr_retail_recreation)) +
geom_line() +
labs(
x = NULL,
y = "Percentage change of visits in retail shopping\nand recreational areas",
caption = "Movement data: Google CMR."
) +
gghighlight(TRUE, label_key = east)
ggplot(caricom_tidycovid19, aes(x = date, y = gcmr_retail_recreation)) +
geom_line() +
labs(
x = NULL,
y = "Percentage change of visits in retail shopping\nand recreational areas",
caption = "Movement data: Google CMR."
)
library(gghighlight)
ggplot(caricom_tidycovid19, aes(x = date, y = gcmr_retail_recreation)) +
geom_line() +
labs(
x = NULL,
y = "Percentage change of visits in retail shopping\nand recreational areas",
caption = "Movement data: Google CMR."
)
install.packages(c("hrbrthemes", "maps"))
# Relative Growth in Confirmed Cases --------------------------------------
cc100k <- caricom_tidycovid19 %>% ggplot(aes(x=date, y=confirmed_per_100k, group = income, colour = country)) +
geom_line() +
labs(x = "Date",
y = "Confirmed Cases per 100,000 persons") +
ggtitle("Confirmed Cases of COVID-19 per 100,000 by CARICOM Member State")
ggplotly(cc100k)
# Relative Growth in Confirmed Cases --------------------------------------
library(plotly)
cc100k <- caricom_tidycovid19 %>% ggplot(aes(x=date, y=confirmed_per_100k, group = income, colour = country)) +
geom_line() +
labs(x = "Date",
y = "Confirmed Cases per 100,000 persons") +
ggtitle("Confirmed Cases of COVID-19 per 100,000 by CARICOM Member State")
ggplotly(cc100k)
cd_cum <- caricom_tidycovid19 %>% ggplot(aes(x=date, y=deaths, fill = income , colour = country)) +
geom_area() +
labs(x = "Date",
y = "Confirmed Cases") +
ggtitle("Cumulative Cases of COVID-19 in the CARICOM Region")
ggplotly(cd_cum)
